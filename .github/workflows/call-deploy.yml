name: "Call: deploy"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      url:
        type: string
        required: true
      tag:
        type: string
        required: false
        default: 'latest'
  workflow_dispatch:
    inputs:
      environment:
        type: string
        required: true
      tag:
        type: string
        required: false
        default: 'latest'

jobs:
  deploy:
    runs-on: [ self-hosted, "${{ inputs.environment }}" ]
    needs: [ envs ]
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.url }}
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          clean: false
      - name: Set variables
        run: |
          env_filename=envs/.${{ inputs.environment }}.env
          env_keys="${{ inputs.env_keys }}"
          IFS=',' read -ra env_keys <<< "${env_keys// /}"
          envs_json='${{ toJSON(vars) }}'
          for env_key in "${env_keys[@]}"; do
            env_var=$(echo $envs_json | jq -r --arg env_key "$env_key" '.[$env_key]')
            echo "$env_key=$env_var"
            if [ "$env_var" != "null" ]; then
              echo $env_key=$env_var >> $env_filename
            fi
          done
      - name: Set secrets
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          EMAIL_URL: ${{ secrets.EMAIL_URL }}
          CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_APP_ID: ${{ secrets.GOOGLE_APP_ID }}
          GOOGLE_APP_SECRET: ${{ secrets.GOOGLE_APP_SECRET }}
          FIXER_ACCESS_KEY: ${{ secrets.FIXER_ACCESS_KEY }}
        run: |
          env_filename=envs/.${{ inputs.environment }}.env
          secrets=(
            "SECRET_KEY"
            "CLOUDINARY_URL"
            "EMAIL_URL"
            "SENTRY_DSN"
            "POSTGRES_PASSWORD"
            "DATABASE_URL"
            "GOOGLE_APP_ID"
            "GOOGLE_APP_SECRET"
            "FIXER_ACCESS_KEY"
          )
          for secret in ${secrets[@]}; do
            value=$(echo "${!secret}")
            if [[ -z "$value" ]]; then
              echo "$secret is not defined"
              exit 1
            fi
            echo "$secret=$value" >> $env_filename
          done
          if [[ "${{ inputs.tag }}" == "latest" ]]; then
            echo "SENTRY_RELEASE=${{ github.sha }}" >> $env_filename
          else
            echo "SENTRY_RELEASE=${{ inputs.tag }}" >> $env_filename
          fi
      - name: Pull images
        run: |
          export TAG=${{ inputs.tag }}
          docker-compose -f docker/${{ inputs.environment }}/docker-compose.yml pull api
          docker pull ghcr.io/creaty-co/creaty-web/web:${{ inputs.tag }}
      - name: Up docker compose
        run: |
          docker-compose -f docker/${{ inputs.environment }}/docker-compose.yml up \
          --build -d
