name: "Call: deploy"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      url:
        type: string
        required: true
      tag:
        type: string
        required: false
        default: 'latest'
      web_tag:
        type: string
        required: false
  workflow_dispatch:
    inputs:
      environment:
        type: string
        required: true
      tag:
        type: string
        required: false
        default: 'latest'
      web_tag:
        type: string
        required: false

jobs:
  get_commit_title:
    uses: ./.github/workflows/call-get_commit_title.yml
  deploy:
    runs-on: [ self-hosted, "${{ inputs.environment }}" ]
    needs: [ get_commit_title ]
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.url }}
    env:
      env_filename: envs/.${{ inputs.environment }}.env
    steps:
      - uses: actions/checkout@v3.6.0
      - name: Cd to ${{ inputs.environment }} directory
        run: |
          mkdir -p ~/creaty/${{ inputs.environment }}
          cd ~/creaty/${{ inputs.environment }}
          cp -r ~/runner/work/creaty-api/creaty-api/* .
      - name: Set certs
        run: |
          cd ~/creaty/${{ inputs.environment }}
          mkdir -p nginx/certs
          echo -e "${{ vars.NGINX_SSL_CRT }}" > nginx/certs/crt.pem
          echo -e "${{ secrets.NGINX_SSL_KEY }}" > nginx/certs/key.pem
          mkdir -p db/certs
          echo -e "${{ vars.DB_SSL_CRT }}" > db/certs/crt.pem
          echo -e "${{ secrets.DB_SSL_KEY }}" > db/certs/key.pem
      - name: Set variables
        run: |
          cd ~/creaty/${{ inputs.environment }}
          echo '' > $env_filename
          variable_keys=(
            "DEV_API_DOMAIN"
            "DEV_WEB_DOMAIN"
            "DEV_CAL_DOMAIN"
            "WEB_DOMAIN"
            "API_DOMAIN"
            "DEBUG"
            "TEST"
            "ANON_THROTTLE_RATE"
            "USE_BROWSABLE_API"
            "EMAIL_BACKEND"
            "CELERY_TASK_EAGER"
            "CELERY_REDIS_MAX_CONNECTIONS"
            "CELERY_BROKER_POOL_LIMIT"
            "CLOUDINARY_PREFIX"
            "SENTRY_ENVIRONMENT"
            "REDIRECT_ON_UNSUBSCRIBE"
            "GOOGLE_APP_ID"
            "LOG_PRETTY"
            "LOG_REQUESTS"
            "LOG_LEVEL"
            "GUNICORN_WORKERS"
            "CAL_DOMAIN"
          )
          vars_json='${{ toJSON(vars) }}'
          for key in "${variable_keys[@]}"; do
            value=$(echo $vars_json | jq -r --arg key "$key" '.[$key]')
            if [ "$value" != "null" ]; then
              echo $key=$value >> $env_filename
              if [ "$key" == "CAL_DOMAIN" ]; then
                echo NEXT_PUBLIC_WEBAPP_URL=https://$value >> $env_filename
                echo NEXT_AUTH_URL=https://$value/api/auth >> $env_filename
              fi
            fi
          done
      - name: Set secrets
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          EMAIL_URL: ${{ secrets.EMAIL_URL }}
          CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_APP_ID: ${{ secrets.GOOGLE_APP_ID }}
          GOOGLE_APP_SECRET: ${{ secrets.GOOGLE_APP_SECRET }}
          FIXER_ACCESS_KEY: ${{ secrets.FIXER_ACCESS_KEY }}
          NEXT_AUTH_SECRET: ${{ secrets.NEXT_AUTH_SECRET }}
          CALENDSO_ENCRYPTION_KEY: ${{ secrets.CALENDSO_ENCRYPTION_KEY }}
          EMAIL_SERVER_PASSWORD: ${{ secrets.EMAIL_SERVER_PASSWORD }}
        run: |
          cd ~/creaty/${{ inputs.environment }}
          secret_keys=(
            "SECRET_KEY"
            "CLOUDINARY_URL"
            "EMAIL_URL"
            "SENTRY_DSN"
            "POSTGRES_PASSWORD"
            "GOOGLE_APP_SECRET"
            "FIXER_ACCESS_KEY"
            "NEXT_AUTH_SECRET"
            "CALENDSO_ENCRYPTION_KEY"
            "EMAIL_SERVER_PASSWORD"
          )
          for key in ${secret_keys[@]}; do
            value=$(echo "${!key}")
            if [[ -z "$value" ]]; then
              echo "$key is not defined"
              exit 1
            fi
            echo "$key=$value" >> $env_filename
          done
          echo "DATABASE_URL=psql://pg:${{ secrets.POSTGRES_PASSWORD }}@db:5432/db" \
            >> $env_filename
      - name: Set Sentry release
        run: |
          cd ~/creaty/${{ inputs.environment }}
          if [[ "${{ inputs.tag }}" == "latest" ]]; then
            version=${{ needs.get_commit_title.outputs.title }}
            echo "SENTRY_RELEASE=$version" >> $env_filename
          else
            echo "SENTRY_RELEASE=${{ inputs.tag }}" >> $env_filename
          fi
      - name: Pull images
        run: |
          cd ~/creaty/${{ inputs.environment }}
          web_tag='${{ inputs.web_tag }}'
          if [[ -z "$web_tag" ]]; then
            web_tag=${{ inputs.tag }}
          fi
          docker pull ghcr.io/creaty-co/creaty-web/web:$web_tag
          docker pull ghcr.io/creaty-co/creaty-api/api:${{ inputs.tag }}
      - name: Up docker compose
        run: |
          cd ~/creaty/${{ inputs.environment }}
          export TAG=${{ inputs.tag }}
          docker-compose -f docker/${{ inputs.environment }}/docker-compose.yml up \
            --build -d
