version: '3.9'

services:
  db:
    container_name: db
    environment:
      POSTGRES_USER: pg
      POSTGRES_DB: db
    env_file: [../envs/.base.env]
    networks: [db_network]
    restart: unless-stopped

  redis-cache:
    container_name: redis-cache
    image: redis:7.0.12
    entrypoint: [redis-server, /etc/redis/redis.conf]
    env_file: [../envs/.base.env]
    volumes:
      - ../redis/redis-cache.conf:/etc/redis/redis.conf
    networks: [redis_network]
    restart: unless-stopped

  redis-cacheops:
    container_name: redis-cacheops
    extends:
      service: redis-cache

  redis-storage:
    container_name: redis-storage
    image: redis:7.0.12
    entrypoint: [redis-server, /etc/redis/redis.conf]
    env_file: [../envs/.base.env]
    volumes:
      - ../redis/redis-storage.conf:/etc/redis/redis.conf
    networks: [redis_network]
    restart: unless-stopped

  redis-celery:
    container_name: redis-celery
    extends:
      service: redis-storage

  api:
    container_name: api
    command: bash -c "
      python manage.py migrate
      && python manage.py collectstatic --noinput
      && (daphne -b 0.0.0.0 -p 8001 api.asgi:application &)
      && gunicorn api.wsgi -c gunicorn/config.py
      "
    env_file: [../envs/.base.env]
    networks: [db_network, redis_network]
    restart: unless-stopped

  celery:
    container_name: celery
    extends:
      service: api
    command: bash -c "
      sleep 10
      && celery -A api worker -c 2 -P gevent -l info
      "

  cbeat:
    container_name: cbeat
    extends:
      service: api
    command: bash -c "
      sleep 10
      && celery -A api beat -S django -l info
      "

  nginx:
    container_name: nginx
    build:
      context: ../nginx
    environment:
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: .conf
    env_file: [../envs/.base.env]
    networks: [api_network]
    restart: unless-stopped

  platform-db:
    container_name: platform-db
    image: postgres:15.3
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: pg
      POSTGRES_PASSWORD: password
    volumes:
      - platform-db_volume:/var/lib/postgresql/data/
    networks: [platform-db_network]
    restart: unless-stopped

  platform:
    container_name: platform
    #image: ghcr.io/creaty-co/creaty-platform/platform:latest
    image: platform
    env_file: [../envs/.base.env]
    environment:
      DATABASE_URL: postgresql://pg:password@platform-db:5432/db
      DATABASE_DIRECT_URL: postgresql://pg:password@platform-db:5432/db
    networks: [platform-db_network, platform_network]
    restart: unless-stopped

volumes:
  db_volume:
  redis_volume:
  media_volume:
  api_static_volume:
  platform-db_volume:

networks:
  db_network:
  redis_network:
  api_network:
  platform-db_network:
  platform_network:
  platform-api_network:
