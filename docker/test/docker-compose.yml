services:
  db:
    container_name: test-db
    extends:
      file: ../docker-compose.base.yml
      service: db
    image: postgres:15.3-alpine
    env_file: [../../envs/.test.env]
    restart: 'no'

  redis-cache:
    container_name: test-redis-cache
    extends:
      file: ../docker-compose.base.yml
      service: redis-cache
    image: redis:7.0.12-alpine
    env_file: [../../envs/.test.env]
    restart: 'no'

  redis-cacheops:
    container_name: test-redis-cacheops
    extends:
      file: ../docker-compose.base.yml
      service: redis-cacheops
    image: redis:7.0.12-alpine
    env_file: [../../envs/.test.env]
    restart: 'no'

  redis-storage:
    container_name: test-redis-storage
    extends:
      file: ../docker-compose.base.yml
      service: redis-storage
    image: redis:7.0.12-alpine
    env_file: [../../envs/.test.env]
    restart: 'no'

  api:
    container_name: test-api
    extends:
      file: ../docker-compose.base.yml
      service: api
    image: python:3.12.4
    environment:
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
      DJANGO_SETTINGS_MODULE: api.settings
    env_file: [../../envs/.test.env]
    working_dir: /api
    # language="shell script"
    command: |
      bash -c "
        start=\$(date +%s) &&
      
        pip_start=\$(date +%s) &&
        xargs --max-args=1 --max-procs=\$(cat requirements.txt | wc -l) pip install \\
          --no-input --progress-bar off --root-user-action ignore \\
          --no-cache-dir --disable-pip-version-check --no-clean --prefer-binary \\
          < requirements.txt \\
        &&
        pip_end=\$(date +%s) &&
        echo \"pip install took \$(( pip_end - pip_start )) seconds\" &&
      
        test_start=\$(date +%s) &&
        coverage run manage.py test --noinput &&
        coverage_end=\$(date +%s) &&
        echo \"test took \$(( coverage_end - test_start )) seconds\" &&
      
        report_start=\$(date +%s) &&
        coverage report &&
        report_end=\$(date +%s) &&
        echo \"coverage report took \$(( report_end - report_start )) seconds\" &&
      
        xml_start=\$(date +%s) &&
        coverage xml -o /api/coverages/coverage.xml &&
        xml_end=\$(date +%s) &&
        echo \"coverage xml took \$(( xml_end - xml_start )) seconds\" &&
      
        end=\$(date +%s) &&
        echo \"Total execution time: \$(( end - start )) seconds\"
      "
    volumes:
      - ../..:/api
    depends_on: [db, redis-cache, redis-cacheops, redis-storage]
    restart: 'no'

networks:
  db_network:
  redis_network:
