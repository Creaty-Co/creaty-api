services:
  db:
    container_name: test-db
    extends:
      file: ../docker-compose.base.yml
      service: db
    image: postgres:15.3
    env_file: [../../envs/.test.env]
    restart: 'no'

  redis-cache:
    container_name: test-redis-cache
    extends:
      file: ../docker-compose.base.yml
      service: redis-cache
    env_file: [../../envs/.test.env]
    restart: 'no'

  redis-cacheops:
    container_name: test-redis-cacheops
    extends:
      file: ../docker-compose.base.yml
      service: redis-cacheops
    env_file: [../../envs/.test.env]
    restart: 'no'

  redis-storage:
    container_name: test-redis-storage
    extends:
      file: ../docker-compose.base.yml
      service: redis-storage
    env_file: [../../envs/.test.env]
    restart: 'no'

  api:
    container_name: test-api
    extends:
      file: ../docker-compose.base.yml
      service: api
    image: python:3.12.4
    environment:
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
      DJANGO_SETTINGS_MODULE: api.settings
    env_file: [../../envs/.test.env]
    working_dir: /api
    command: |
      bash -c "
        pip install -r requirements.txt &&
        coverage run manage.py test --noinput &&
        coverage report &&
        coverage xml -o /api/coverages/coverage.xml
      "
    volumes: [../../coverages:/api/coverages]
    depends_on: [db, redis-cache, redis-cacheops, redis-storage]
    restart: 'no'

networks:
  db_network:
  redis_network:
